name: Build OnePlus_Kernel
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8650'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace3_pro_v'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'pineapple'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android14'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.1'
      KERNEL_NAME:
        description: "修改内核名称"
        required: true
        default: '-android14-11-o-g1132d864665d'
      kernelsu_variant:
        description: "选择 KSU"
        required: true
        type: choice
        options:
          - Kernel
          - SukiSU
        default: SukiSU
      kernelsu_version:
        description: "选择 KSU 版本"
        required: true
        type: choice
        options:
          - without ksu
          - tag
          - main
        default: main
      SUSFS_ENABLED:
        description: "添加 SUSFS"
        required: true
        type: boolean
        default: true
      VFS_patch_ENABLED:
        description: "添加vfs补丁（新钩子）？"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable
jobs:
  build_kernel:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      # 1. 环境初始化
      - name: 初始化工作区
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1
          submodules: recursive
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          clean: true
          lfs: true

      # 2. 配置 Git 身份（独立 Step）
      - name: 配置 Git 用户信息
        run: |
          git config --global user.name "ychenxuan"
          git config --global user.email "3494167979@qq.com"

      # 3. 安装系统依赖
      - name: 安装依赖
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
            build-essential crossbuild-essential-arm64 fakeroot kernel-wedge \
            libselinux1-dev libelf-dev device-tree-compiler libncurses-dev flex bison \
            libssl-dev ccache python3-pip git curl \
            && sudo pip3 install pyyaml

      # 4. 安装 Bazel 编译器
      - name: 安装 Bazel
        run: |
          sudo apt install -y bazel-5.4.0
          bazel version

      # 5. 安装 KernelSU 依赖
      - name: 安装 KernelSU 依赖
        if: ${{ github.event.inputs.kernelsu_variant != '官方版本' }}
        run: |
          sudo apt install -y protobuf-compiler libprotobuf-dev

      # 6. 高级环境配置
      - name: 配置 ccache 缓存
        run: |
          sudo apt install -y ccache
          ccache -M 100G
          echo 'export PATH="/usr/lib/ccache:${PATH}"' >> ~/.bashrc

      # 7. 配置内核头文件
      - name: 配置内核头文件
        run: |
          sudo apt install -y linux-headers-$(uname -r)
          sudo ln -s /usr/src/linux-headers-$(uname -r) /lib/modules/$(uname -r)/build

      # 8. 同步源码
      - name: 同步源码
        run: |
          mkdir kernel-workspace && cd kernel-workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
                    -b refs/heads/oneplus/${{ github.event.inputs.device }} \
                    -m ${{ github.event.inputs.config }}.xml \
                    --depth=1
          repo sync -j$(nproc) --fail-fast

      # 9. 集成 KernelSU
      - name: 集成 KernelSU/SukiSU
        if: ${{ github.event.inputs.kernelsu_variant != '官方版本' }}
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 12505)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      # 10. 应用补丁
      - name: 应用 SUSFS 补丁
        if: ${{ github.event.inputs.susfs_enable }}
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.android_ver }}-${{ github.event.inputs.kernel_ver }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform

          # 复制补丁文件
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.android_ver }}-${{ github.event.inputs.kernel_ver }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # 应用主补丁
          echo "正在给内核打 SUSFS 补丁..."
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.android_ver }}-${{ github.event.inputs.kernel_ver }}.patch || true
          echo "SUSFS 补丁应用完成"

      # 11. 应用 VFS 新钩子补丁
      - name: 应用 VFS 新钩子补丁
        if: ${{ github.event.inputs.vfs_patch_enable == '启用' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/hooks/new_hooks.patch .
          echo "正在应用 VFS 新钩子补丁..."
          patch -p1 -F 3 < new_hooks.patch
          echo "VFS 补丁应用完成"

      # 12. 配置内核
      - name: 配置内核选项
        run: |
          cd kernel_workspace/kernel_platform
          # 添加基础配置
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          # 添加 VFS 相关配置
          if [[ "${{ github.event.inputs.vfs_patch_enable }}" == '启用' ]]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          # 添加 SUSFS 完整配置
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          # 移除版本检查
          sed -i 's/check_defconfig//' ./common/build.config.gki

      # 13. 编译内核
      - name: 编译内核
        run: |
          cd kernel_workspace
          if [ "${{ github.event.inputs.device }}" = "sm8650" ]; then
            ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.processor }} gki
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.processor }} gki
          fi

      # 14. 打包产物
      - name: 制作 AnyKernel3 包
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cp kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.processor }}-gki/dist/Image ./AnyKernel3/
          cp kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.processor }}-gki/dist/Image ./kernel_workspace/kernel

      # 15. 上传产物（修正版）
      - name: 上传编译产物
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}_${{ github.sha }}
          path: |
            kernel_workspace/kernel/*
            AnyKernel3/Image
          retention-days: 7

      # 16. 清理工作区
        run: |
          rm -rf kernel-workspace
          rm -rf ~/.ccache
          echo "清理完成，释放磁盘空间"
