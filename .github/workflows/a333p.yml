name: Build OnePlus Kernel

on:
  workflow_dispatch:
    inputs:
      cpu:
        description: "CPU型号 (sm8650/sm8450)"
        required: true
        default: sm8650
      feil:
        description: "配置文件名 (xxx.xml)"
        required: true
        default: oneplus_ace3_pro_v
      cpud:
        description: "处理器代号 (pineapple/mango)"
        required: true
        default: pineapple
      android_version:
        description: "Android版本 (android14/android15)"
        required: true
        default: android14
      kernel_version:
        description: "内核版本 (6.1/5.10)"
        required: true
        default: 6.1
      kernel_name:
        description: "自定义内核名称"
        required: true
        default: -android15-11-QQ-g1132d864665d
      ksu_variant:
        description: "KSU类型 (Kernel/SukiSU)"
        required: true
        type: choice
        options:
          - Kernel
          - SukiSU
        default: SukiSU
      ksu_version:
        description: "KSU版本 (tag/main)"
        required: true
        type: choice
        options:
          - without ksu
          - tag
          - main
        default: main
      susfs_enabled:
        description: "启用SUSFS"
        required: true
        type: boolean
        default: true
      vfs_patch_enabled:
        description: "启用VFS新钩子"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KSUVER: unknown
      LOG_FILE: build.log

    steps:
      - name: 初始化环境
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 配置Git
        run: |
          git config --global user.name "YourGitHubName"
          git config --global user.email "your@email.com"

      - name: 安装依赖
        run: |
          sudo apt update && sudo apt install -y \
            build-essential crossbuild-essential-arm64 \
            git curl python3 libncurses-dev bc flex bison \
            device-tree-compiler mtools dosfstools

      - name: 安装Repo工具
        run: |
          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod +x ~/bin/repo
          export PATH=~/bin:$PATH

      - name: 同步代码仓库
        run: |
          mkdir -p ~/kernel_build
          cd ~/kernel_build
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
                    -b refs/heads/oneplus/${{ inputs.cpu }} \
                    -m ${{ inputs.feil }}.xml --depth=1
          repo sync -j$(nproc)

      - name: 应用SUSFS补丁（仅SukiSU）
        if: ${{ inputs.ksu_variant == 'SukiSU' }}
        run: |
          cd ~/kernel_build/kernel_platform
          # 动态生成SUSFS分支名称
          susfs_branch="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          # 尝试克隆指定分支，失败则回退到master
          if ! git clone -b "${susfs_branch}" https://gitlab.com/simonpunk/susfs4ksu.git; then
            echo "警告: 分支 $susfs_branch 不存在，切换到master..."
            git clone https://gitlab.com/simonpunk/susfs4ksu.git
          fi
          # 应用补丁
          cp susfs4ksu/kernel_patches/50_add_susfs*.patch common/
          if ! patch -p1 < common/50_add_susfs*.patch; then
            echo "错误: SUSFS补丁应用失败" >&2
            exit 1
          fi
          # 处理SukiSU专用补丁
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cp SukiSU_patch/69_hide_stuff.patch common/
          if ! patch -p1 < common/69_hide_stuff.patch; then
            echo "错误: 隐藏补丁应用失败" >&2
            exit 1
          fi

      - name: 配置内核
        run: |
          cd ~/kernel_build/kernel_platform
          # 设置内核名称
          sed -i '$s|echo "\$res"|echo "${{ inputs.kernel_name }}"|' scripts/setlocalversion
          # 配置选项
          make ARCH=arm64 O=out menuconfig
          # 保存配置
          cp .config arch/arm64/configs/${{ inputs.kernel_name }}.config

      - name: 编译内核
        run: |
          cd ~/kernel_build/kernel_platform
          # 构建命令
          ./build_with_bazel.py -t ${{ inputs.cpud }} gki --output_groups=images 2>&1 | tee $LOG_FILE
          # 检查构建结果
          if ! grep -q "Image.gz-dtb is ready" $LOG_FILE; then
            echo "错误: 内核构建失败" >&2
            exit 1
          fi

      - name: 打包产物
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.kernel_name }}-${{ inputs.cpu }}
          path: |
            ~/kernel_build/kernel_platform/out/arch/arm64/boot/Image.gz-dtb
            ~/kernel_build/kernel_platform/out/arch/arm64/boot/dt.img
            ~/kernel_build/kernel_platform/out/.config
          retention-days: 14
